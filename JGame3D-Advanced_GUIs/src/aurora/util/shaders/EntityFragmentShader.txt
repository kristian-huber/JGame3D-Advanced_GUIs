#version 330

in vec2 pass_textureCoords;
in vec3 toLightVector[4];
in vec3 surfaceNormal;
in float visibility;
in vec3 camVec;

out vec4 out_color;

uniform sampler2D textureSampler;
uniform vec3 lightColor[4];
uniform vec3 skyColor;
uniform float reflect;
uniform float damp;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(camVec);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpec = vec3(0.0);
	
	for(int i = 0; i < 4; i++){
	
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotl = dot(unitNormal,unitLightVector);		
		float brightness = max(nDotl, 0.0);
		vec3 lightDir = -unitLightVector;
		
		//Substitute for Reflect Method
		vec3 rld = lightDir - 2.0 * dot(unitNormal, lightDir) * unitNormal;
		
		float specFactor = dot(rld, camVec);
		specFactor = max(specFactor, 0.0);
		float damped = pow(specFactor, damp);
		
		totalDiffuse = totalDiffuse + brightness * lightColor[i];
		totalSpec = totalSpec + damped * reflect * lightColor[i];
	}
	
	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 textureColor = texture(textureSampler,pass_textureCoords);
	if(textureColor.a<0.5){
		discard;
	}
	
	out_color = vec4(totalDiffuse,1.0) * texture(textureSampler, pass_textureCoords) + vec4(totalSpec, 1.0);
	out_color = mix(vec4(skyColor,1.0),out_color,visibility);
}